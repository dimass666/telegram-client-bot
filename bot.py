import telebot
import os
from dotenv import load_dotenv
from database import init_db, add_client, get_all_clients
from telebot import types

load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
admin_id = int(os.getenv("ADMIN_ID"))

main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
main_menu.row("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞", "üóë –£–¥–∞–ª–∏—Ç—å")
main_menu.row("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
main_menu.row("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", "üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É")

client_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id != admin_id:
        return bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM –¥–ª—è PS –∫–ª–∏–µ–Ω—Ç–æ–≤!", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(message):
    if message.from_user.id != admin_id:
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫:")
    bot.register_next_step_handler(message, ask_birth_date)

def ask_birth_date(message):
    client_data["username"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    bot.register_next_step_handler(message, ask_email)

def ask_email(message):
    client_data["birth_date"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email:")
    bot.register_next_step_handler(message, ask_account_password)

def ask_account_password(message):
    client_data["email"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(message, ask_mail_password)

def ask_mail_password(message):
    client_data["account_password"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º):")
    bot.register_next_step_handler(message, ask_subscription)

def ask_subscription(message):
    client_data["mail_password"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_subscription_choice)

def handle_subscription_choice(message):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
        bot.register_next_step_handler(message, ask_subscription_start)
    else:
        client_data["subscription_name"] = "–ù–µ—Ç—É"
        client_data["subscription_start"] = ""
        client_data["subscription_end"] = ""
        client_data["region"] = ""
        ask_games(message)

def ask_subscription_start(message):
    client_data["subscription_name"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
    bot.register_next_step_handler(message, handle_subscription_start)

def handle_subscription_start(message):
    from datetime import datetime, timedelta
    try:
        start = datetime.strptime(message.text, "%d.%m.%Y")
        client_data["subscription_start"] = message.text
        if "1–º" in client_data["subscription_name"]:
            end = start + timedelta(days=30)
        elif "3–º" in client_data["subscription_name"]:
            end = start + timedelta(days=90)
        elif "12–º" in client_data["subscription_name"]:
            end = start + timedelta(days=365)
        else:
            end = start
        client_data["subscription_end"] = end.strftime("%d.%m.%Y")
        client_data["region"] = "(—Ç—É—Ä)" if "—Ç—É—Ä" in client_data["subscription_name"].lower() else "(—É–∫—Ä)" if "—É–∫—Ä" in client_data["subscription_name"].lower() else "(–¥—Ä—É–≥–æ–µ)"
        ask_games(message)
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        bot.register_next_step_handler(message, handle_subscription_start)

def ask_games(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–ø–æ —Å—Ç—Ä–æ–∫–∞–º):")
    bot.register_next_step_handler(message, save_client)

def save_client(message):
    client_data["games"] = message.text
    data = (
        client_data["username"],
        client_data["birth_date"],
        client_data["email"],
        client_data["account_password"],
        client_data["mail_password"],
        client_data.get("subscription_name", "–ù–µ—Ç—É"),
        client_data.get("subscription_start", ""),
        client_data.get("subscription_end", ""),
        client_data.get("region", ""),
        client_data["games"]
    )
    add_client(data)
    bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    clients = get_all_clients()
    for client in clients:
        text = (
            f"–ò–º—è: {client[1]}
"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {client[2]}
"
            f"Email: {client[3]}
"
            f"–ü–∞—Ä–æ–ª—å: {client[4]}
"
            f"–ü–æ—á—Ç–∞: {client[5]}
"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {client[6]} ({client[7]} - {client[8]})
"
            f"–†–µ–≥–∏–æ–Ω: {client[9]}
"
            f"–ò–≥—Ä—ã:
{client[10]}"
        )
        bot.send_message(message.chat.id, text)

if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)
