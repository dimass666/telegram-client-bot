import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from database import *
import datetime
import threading
import time
import os

API_TOKEN = "7832902735:AAGJzhg00l7x2R8jr-eonf5KZF9c8QYQaCY"
ALLOWED_USER_ID = 350902460

bot = telebot.TeleBot(API_TOKEN)
user_states = {}
client_data = {}

def is_authorized(message):
    return message.from_user.id == ALLOWED_USER_ID

def reset_user_state(user_id):
    user_states.pop(user_id, None)
    client_data.pop(user_id, None)

def show_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    markup.add("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    markup.add("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", "üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É")
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        return bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    show_menu(message)

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_client_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    user_states[message.chat.id] = "edit_request"

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_request")
def handle_edit_request(message):
    phone = message.text.strip()
    data = get_client_block(phone)
    if not data:
        bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        reset_user_state(message.chat.id)
        return show_menu(message)
    client_data[message.chat.id] = phone
    user_states[message.chat.id] = "edit_menu"
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üì± –¢–µ–ª–µ—Ñ–æ–Ω", "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    markup.add("üîê –ê–∫–∫–∞—É–Ω—Ç", "üïπ –ü–æ–¥–ø–∏—Å–∫–∞")
    markup.add("üéÆ –ò–≥—Ä—ã", "üìé –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã")
    markup.add("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{data}", reply_markup=markup)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_menu")
def edit_menu_choice(message):
    choice = message.text.strip()
    if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        reset_user_state(message.chat.id)
        return show_menu(message)
    elif choice == "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        user_states[message.chat.id] = "confirm_delete"
        bot.send_message(message.chat.id, "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.", reply_markup=markup)
    elif choice == "üìé –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã":
        user_states[message.chat.id] = "edit_attachment"
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω/—Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã.")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "confirm_delete")
def delete_from_edit(message):
    if message.text.lower() == "–¥–∞":
        delete_client(client_data[message.chat.id])
        bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    reset_user_state(message.chat.id)
    show_menu(message)

@bot.message_handler(content_types=["photo", "document"])
def replace_attachment(message):
    cid = message.chat.id
    if user_states.get(cid) == "edit_attachment":
        phone = client_data[cid]
        folder = f"attachments/{phone}"
        os.makedirs(folder, exist_ok=True)
        for f in os.listdir(folder):
            os.remove(os.path.join(folder, f))
        file = message.photo[-1] if message.photo else message.document
        file_info = bot.get_file(file.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        filename = file_info.file_path.split("/")[-1]
        with open(os.path.join(folder, filename), "wb") as f:
            f.write(downloaded_file)
        bot.send_message(cid, "‚úÖ –í–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        reset_user_state(cid)
        show_menu(message)

# üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
def start_search(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:")
    user_states[message.chat.id] = "search_request"

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "search_request")
def handle_search(message):
    phone = message.text.strip()
    data = get_client_block(phone)
    if not data:
        bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        reset_user_state(message.chat.id)
        return show_menu(message)
    user_states[message.chat.id] = "edit_menu"
    client_data[message.chat.id] = phone
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üì± –¢–µ–ª–µ—Ñ–æ–Ω", "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    markup.add("üîê –ê–∫–∫–∞—É–Ω—Ç", "üïπ –ü–æ–¥–ø–∏—Å–∫–∞")
    markup.add("üéÆ –ò–≥—Ä—ã", "üìé –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã")
    markup.add("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{data}", reply_markup=markup)

# üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def handle_list_clients(message):
    clients = get_all_clients_text()
    if not clients:
        return bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    for entry in clients:
        bot.send_message(message.chat.id, entry)

# üß® –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã
@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É")
def confirm_clear(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É?", reply_markup=markup)
    user_states[message.chat.id] = "clear_confirm"

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "clear_confirm")
def handle_clear_confirmation(message):
    if message.text.lower() == "–¥–∞":
        clear_database()
        bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    reset_user_state(message.chat.id)
    show_menu(message)

# ‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("open_client_"))
def handle_callback(call):
    phone = call.data.split("open_client_")[1]
    data = get_client_block(phone)
    if data:
        bot.send_message(call.message.chat.id, data)
    else:
        bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def notify_loop():
    while True:
        now = datetime.datetime.now()
        if now.hour == 9:
            for phone, typ, months, end, bday in get_upcoming_notifications():
                if end:
                    msg = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\\n–£ –∫–ª–∏–µ–Ω—Ç–∞ {phone} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ {typ} ({months}–º) –∑–∞–≤—Ç—Ä–∞ ({end})"
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"open_client_{phone}"))
                    bot.send_message(ALLOWED_USER_ID, msg, reply_markup=markup)
                if bday:
                    bot.send_message(ALLOWED_USER_ID, f"üéâ –£ –∫–ª–∏–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\\n{phone}")
                    data = get_client_block(phone)
                    if data:
                        bot.send_message(ALLOWED_USER_ID, data)
        time.sleep(3600)

# üîß –ó–∞–ø—É—Å–∫
init_db()
threading.Thread(target=notify_loop, daemon=True).start()
bot.infinity_polling()
