import telebot
from telebot import types
from database import init_db, add_client, get_client_by_identifier, update_client_field
from datetime import datetime, timedelta

bot = telebot.TeleBot("7636123092:AAEAnU8iuShy7UHjH2cwzt1vRA-Pl3e3od8")
admin_id = 350902460
client_data = {}

main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")

def clear_chat(chat_id):
    try:
        msgs = bot.get_chat_history(chat_id, limit=20)
        for msg in msgs:
            try:
                bot.delete_message(chat_id, msg.message_id)
            except:
                continue
    except:
        pass

@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id != admin_id:
        return bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    bot.send_message(message.chat.id, "CRM –¥–ª—è PS –∫–ª–∏–µ–Ω—Ç–æ–≤", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def start_add(message):
    if message.from_user.id != admin_id:
        return
    client_data.clear()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "Telegram", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=markup)
    bot.register_next_step_handler(message, get_identifier)

def get_identifier(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        clear_chat(message.chat.id)
        return
    client_data["method"] = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ {message.text.lower()}:")
    bot.register_next_step_handler(message, ask_birth_option)

def ask_birth_option(message):
    client_data["username"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ï—Å—Ç—å", "–ù–µ—Ç—É", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–®–∞–≥ 2: –ï—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=markup)
    bot.register_next_step_handler(message, ask_birth_date)

def ask_birth_date(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        clear_chat(message.chat.id)
        return
    if message.text == "–ï—Å—Ç—å":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
        bot.register_next_step_handler(message, collect_birth_date)
    else:
        client_data["birth_date"] = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        ask_account_info(message)

def collect_birth_date(message):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        client_data["birth_date"] = message.text
    except:
        client_data["birth_date"] = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    ask_account_info(message)

def ask_account_info(message):
    bot.send_message(message.chat.id, "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ:
email
–ø–∞—Ä–æ–ª—å
–ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ)")
    bot.register_next_step_handler(message, process_account_info)

def process_account_info(message):
    lines = message.text.split("\n")
    email = lines[0] if len(lines) > 0 else ""
    password = lines[1] if len(lines) > 1 else ""
    mail_pass = lines[2] if len(lines) > 2 else ""
    client_data["email"] = email
    client_data["account_password"] = f"{email};{password}"
    client_data["mail_password"] = mail_pass
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–®–∞–≥ 4: –û—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, ask_subscriptions_count)

def ask_subscriptions_count(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        clear_chat(message.chat.id)
        return
    if message.text == "–ù–µ—Ç":
        client_data["subscription_name"] = "–ù–µ—Ç—É"
        client_data["subscription_start"] = ""
        client_data["subscription_end"] = ""
        client_data["region"] = ""
        ask_games_option(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–û–¥–Ω–∞", "–î–≤–µ", "–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ?", reply_markup=markup)
        bot.register_next_step_handler(message, choose_first_subscription)

def choose_first_subscription(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        clear_chat(message.chat.id)
        return
    client_data["subs_total"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("PS Plus Deluxe", "PS Plus Extra", "PS Plus Essential", "EA Play")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_first_subscription)

def collect_first_subscription(message):
    client_data["sub1_type"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("12–º", "3–º", "1–º", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–°—Ä–æ–∫ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_first_duration)

def collect_first_duration(message):
    client_data["sub1_duration"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("(—É–∫—Ä)", "(—Ç—É—Ä)", "(–¥—Ä—É–≥–æ–π)")
    bot.send_message(message.chat.id, "–†–µ–≥–∏–æ–Ω –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_first_region)

def collect_first_region(message):
    client_data["sub1_region"] = message.text
    bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
    bot.register_next_step_handler(message, calculate_subscriptions)

def calculate_subscriptions(message):
    try:
        start = datetime.strptime(message.text, "%d.%m.%Y")
    except:
        start = datetime.now()
    client_data["subscription_start"] = start.strftime("%d.%m.%Y")
    duration = client_data["sub1_duration"]
    end = start + (timedelta(days=365) if duration == "12–º" else timedelta(days=90) if duration == "3–º" else timedelta(days=30))
    client_data["subscription_end"] = end.strftime("%d.%m.%Y")
    client_data["region"] = client_data["sub1_region"]
    client_data["subscription_name"] = f"{client_data['sub1_type']} {client_data['sub1_duration']} {client_data['sub1_region']}"

    if client_data.get("subs_total") == "–î–≤–µ":
        # –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç–æ–ª—å–∫–æ –∏–∑ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if "EA Play" in client_data["sub1_type"]:
            second = ["PS Plus Deluxe", "PS Plus Extra", "PS Plus Essential"]
        else:
            second = ["EA Play"]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for s in second:
            markup.add(s)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=markup)
        bot.register_next_step_handler(message, add_second_subscription)
    else:
        ask_games_option(message)

def add_second_subscription(message):
    client_data["sub2_type"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("12–º", "3–º", "1–º", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–°—Ä–æ–∫ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, second_sub_duration)

def second_sub_duration(message):
    client_data["sub2_duration"] = message.text
    bot.send_message(message.chat.id, "–†–µ–≥–∏–æ–Ω –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
    bot.register_next_step_handler(message, second_sub_region)

def second_sub_region(message):
    client_data["sub2_region"] = message.text
    bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
    bot.register_next_step_handler(message, complete_subscription_info)

def complete_subscription_info(message):
    try:
        start = datetime.strptime(message.text, "%d.%m.%Y")
    except:
        start = datetime.now()
    duration = client_data["sub2_duration"]
    end = start + (timedelta(days=365) if duration == "12–º" else timedelta(days=90) if duration == "3–º" else timedelta(days=30))
    sub1 = f"{client_data['sub1_type']} {client_data['sub1_duration']} {client_data['sub1_region']}"
    sub2 = f"{client_data['sub2_type']} {client_data['sub2_duration']} {client_data['sub2_region']}"
    client_data["subscription_name"] = f"{sub1} + {sub2}"
    client_data["region"] = f"{client_data['sub1_region']}, {client_data['sub2_region']}"
    client_data["subscription_end"] = end.strftime("%d.%m.%Y")
    ask_games_option(message)

def ask_games_option(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ –∏–≥—Ä—ã —É –∫–ª–∏–µ–Ω—Ç–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, collect_games)

def collect_games(message):
    if message.text == "–ù–µ—Ç":
        client_data["games"] = ""
        finish_add(message)
    elif message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–ø–æ —Å—Ç—Ä–æ–∫–∞–º):")
        bot.register_next_step_handler(message, save_games)
    else:
        clear_chat(message.chat.id)

def save_games(message):
    games = message.text.split("\n")
    client_data["games"] = " ‚Äî‚Äî ".join(games)
    finish_add(message)

def finish_add(message):
    data = (
        client_data.get("username", ""),
        client_data.get("birth_date", ""),
        client_data.get("email", ""),
        client_data.get("account_password", ""),
        client_data.get("mail_password", ""),
        client_data.get("subscription_name", "–ù–µ—Ç—É"),
        client_data.get("subscription_start", ""),
        client_data.get("subscription_end", ""),
        client_data.get("region", ""),
        client_data.get("games", "")
    )
    add_client(data)
    clear_chat(message.chat.id)
    bot.send_message(message.chat.id, f"‚úÖ {client_data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu)

if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)

@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
def search_client(message):
    if message.from_user.id != admin_id:
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram:")
    bot.register_next_step_handler(msg, show_client_data)

def show_client_data(message):
    identifier = message.text.strip()
    client = get_client_by_identifier(identifier)
    if not client:
        return bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    id_, username, birth, email, acc_pass, mail_pass, sub_name, sub_start, sub_end, region, games = client

    text = f"""–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:
–ù–∏–∫ / –¢–µ–ª–µ—Ñ–æ–Ω: {username}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth}
–ê–∫–∫–∞—É–Ω—Ç: {acc_pass}
–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã: {mail_pass}
–ü–æ–¥–ø–∏—Å–∫–∞: {sub_name}
–°—Ä–æ–∫: {sub_start} - {sub_end}
–†–µ–≥–∏–æ–Ω: {region}
–ò–≥—Ä—ã:
{games if games else '–ù–µ—Ç'}

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—ã", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, text, reply_markup=markup)
    client_data["id"] = id_
    bot.register_next_step_handler(message, handle_edit_choice)

def handle_edit_choice(message):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ Telegram:")
        bot.register_next_step_handler(msg, lambda m: update_field(m, "username"))
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
        bot.register_next_step_handler(msg, lambda m: update_field(m, "birth_date"))
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ:
email
–ø–∞—Ä–æ–ª—å
–ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã")
        bot.register_next_step_handler(msg, update_account_info)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        update_subscription_flow(message)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—ã":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–ø–æ —Å—Ç—Ä–æ–∫–∞–º):")
        bot.register_next_step_handler(msg, update_games)
    else:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞", reply_markup=main_menu)

def update_field(message, field):
    update_client_field(client_data["id"], field, message.text.strip())
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main_menu)

def update_account_info(message):
    lines = message.text.split("\n")
    email = lines[0] if len(lines) > 0 else ""
    password = lines[1] if len(lines) > 1 else ""
    mail_pass = lines[2] if len(lines) > 2 else ""
    update_client_field(client_data["id"], "email", email)
    update_client_field(client_data["id"], "account_password", f"{email};{password}")
    update_client_field(client_data["id"], "mail_password", mail_pass)
    bot.send_message(message.chat.id, "–ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=main_menu)

def update_games(message):
    games = message.text.split("\n")
    games_joined = " ‚Äî‚Äî ".join(games)
    update_client_field(client_data["id"], "games", games_joined)
    bot.send_message(message.chat.id, "–ò–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_menu)

def update_subscription_flow(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é", "–î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é", "–û—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π?", reply_markup=markup)
    bot.register_next_step_handler(message, subscription_update_step)

def subscription_update_step(message):
    current = get_client_by_identifier(client_data["id"])
    current_sub = current[6] if current else ""
    if message.text == "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ä–æ–∫, —Ä–µ–≥–∏–æ–Ω):")
        bot.register_next_step_handler(message, lambda m: update_field(m, "subscription_name"))
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é":
        if "EA Play" in current_sub:
            choices = ["PS Plus Deluxe", "PS Plus Extra", "PS Plus Essential"]
        else:
            choices = ["EA Play"]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for item in choices:
            markup.add(item)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: handle_second_sub(m, current_sub))
    else:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞", reply_markup=main_menu)

def handle_second_sub(message, current_sub):
    new = message.text.strip()
    combined = f"{current_sub} + {new}"
    update_client_field(client_data["id"], "subscription_name", combined)
    bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu)