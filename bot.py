import telebot
from telebot import types
from database import init_db, add_client
from datetime import datetime, timedelta

bot = telebot.TeleBot("7636123092:AAEAnU8iuShy7UHjH2cwzt1vRA-Pl3e3od8")
admin_id = 350902460

main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
main_menu.row("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞", "üóë –£–¥–∞–ª–∏—Ç—å")
main_menu.row("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
main_menu.row("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", "üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É")

client_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id != admin_id:
        return bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM –¥–ª—è PS –∫–ª–∏–µ–Ω—Ç–æ–≤!", reply_markup=main_menu)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def step1_choose_input_method(message):
    if message.from_user.id != admin_id:
        return
    client_data.clear()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "Telegram")
    bot.send_message(message.chat.id, "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=markup)
    bot.register_next_step_handler(message, step2_get_identifier)

def step2_get_identifier(message):
    client_data["input_method"] = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ {message.text.lower()}:")
    bot.register_next_step_handler(message, step3_birth_prompt)

def step3_birth_prompt(message):
    client_data["username"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ï—Å—Ç—å", "–ù–µ—Ç—É")
    bot.send_message(message.chat.id, "–®–∞–≥ 2: –ï—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=markup)
    bot.register_next_step_handler(message, step4_birth_check)

def step4_birth_check(message):
    if message.text == "–ï—Å—Ç—å":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
        bot.register_next_step_handler(message, step5_birth_date)
    else:
        client_data["birth_date"] = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        step6_account_prompt(message)

def step5_birth_date(message):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        client_data["birth_date"] = message.text
    except:
        client_data["birth_date"] = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    step6_account_prompt(message)

def step6_account_prompt(message):
    bot.send_message(message.chat.id, "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n–§–æ—Ä–º–∞—Ç:\nemail\n–ø–∞—Ä–æ–ª—å\n–ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)")
    bot.register_next_step_handler(message, step7_account_data)

def step7_account_data(message):
    lines = message.text.split('\n')
    email = lines[0] if len(lines) > 0 else ""
    password = lines[1] if len(lines) > 1 else ""
    mail_pass = lines[2] if len(lines) > 2 else ""
    client_data["email"] = email
    client_data["account_password"] = f"{email};{password}"
    client_data["mail_password"] = mail_pass
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("PS Plus Deluxe", "PS Plus Extra", "PS Plus Essential", "EA Play")
    bot.send_message(message.chat.id, "–®–∞–≥ 4: –ö–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, step8_subscription_type)

def step8_subscription_type(message):
    client_data["sub_type"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("12–º", "3–º", "1–º")
    bot.send_message(message.chat.id, "–®–∞–≥ 5: –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, step9_subscription_duration)

def step9_subscription_duration(message):
    client_data["sub_duration"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("(—É–∫—Ä)", "(—Ç—É—Ä)", "(–¥—Ä—É–≥–æ–π)")
    bot.send_message(message.chat.id, "–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=markup)
    bot.register_next_step_handler(message, step10_subscription_region)

def step10_subscription_region(message):
    client_data["region"] = message.text
    bot.send_message(message.chat.id, "–®–∞–≥ 7: –ö–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞? (–¥–¥.–º–º.–≥–≥–≥–≥)")
    bot.register_next_step_handler(message, step11_subscription_start)

def step11_subscription_start(message):
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y")
        duration = client_data["sub_duration"]
        if duration == "1–º":
            end_date = start_date + timedelta(days=30)
        elif duration == "3–º":
            end_date = start_date + timedelta(days=90)
        elif duration == "12–º":
            end_date = start_date + timedelta(days=365)
        else:
            end_date = start_date
        client_data["subscription_name"] = f"{client_data['sub_type']} {client_data['sub_duration']} {client_data['region']}"
        client_data["subscription_start"] = message.text
        client_data["subscription_end"] = end_date.strftime("%d.%m.%Y")
    except:
        client_data["subscription_name"] = "–ù–µ—Ç—É"
        client_data["subscription_start"] = ""
        client_data["subscription_end"] = ""
    bot.send_message(message.chat.id, "–®–∞–≥ 8: –û—Ñ–æ—Ä–º–ª–µ–Ω—ã –ª–∏ –∏–≥—Ä—ã?", reply_markup=create_yes_no())
    bot.register_next_step_handler(message, step12_games_prompt)

def create_yes_no():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    return markup

def step12_games_prompt(message):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–ø–æ —Å—Ç—Ä–æ–∫–∞–º):")
        bot.register_next_step_handler(message, step13_save_client)
    else:
        client_data["games"] = ""
        step13_save_client(message)

def step13_save_client(message):
    if not client_data.get("games"):
        games = message.text.split('\n')
        client_data["games"] = " ‚Äî‚Äî ".join(games)
    data = (
        client_data.get("username", ""),
        client_data.get("birth_date", ""),
        client_data.get("email", ""),
        client_data.get("account_password", ""),
        client_data.get("mail_password", ""),
        client_data.get("subscription_name", "–ù–µ—Ç—É"),
        client_data.get("subscription_start", ""),
        client_data.get("subscription_end", ""),
        client_data.get("region", ""),
        client_data.get("games", "")
    )
    add_client(data)
    bot.send_message(message.chat.id, f"‚úÖ {client_data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu)

if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)