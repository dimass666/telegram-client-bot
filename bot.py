import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import *
import datetime
import threading
import time
import os
import sqlite3

API_TOKEN = "7832902735:AAGJzhg00l7x2R8jr-eonf5KZF9c8QYQaCY"
ALLOWED_USER_ID = 350902460

bot = telebot.TeleBot(API_TOKEN)
user_states = {}
client_data = {}

def is_authorized(message):
    return message.from_user.id == ALLOWED_USER_ID

def reset_user_state(user_id):
    user_states.pop(user_id, None)
    client_data.pop(user_id, None)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        return bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    show_menu(message)

@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    markup.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"))
    markup.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"), KeyboardButton("üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"))
    markup.add(KeyboardButton("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É"), KeyboardButton("üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É"))
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥", reply_markup=markup)

ADD_CLIENT_STEPS = [
    "phone", "birth", "credentials", "has_subscription",
    "subscription_type", "subscription_duration", "subscription_region",
    "start_date", "games"
]

@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def start_add_client(message):
    user_states[message.chat.id] = "phone"
    client_data[message.chat.id] = []
    bot.send_message(message.chat.id, "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "ask_games")
def handle_ask_games(message):
    cid = message.chat.id
    choice = message.text.strip().lower()
    if "–Ω–µ –∫—É–ø–ª–µ–Ω—ã" in choice:
        user_states[cid] = "ask_attachment"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
        bot.send_message(cid, "–ï—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã?", reply_markup=markup)
    elif "–∫—É–ø–ª–µ–Ω—ã" in choice:
        user_states[cid] = "games"
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    else:
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: –ò–≥—Ä—ã –Ω–µ –∫—É–ø–ª–µ–Ω—ã / –ò–≥—Ä—ã –∫—É–ø–ª–µ–Ω—ã.")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "ask_attachment")
def handle_attachment_question(message):
    cid = message.chat.id
    answer = message.text.strip().lower()
    if answer == "–¥–∞":
        user_states[cid] = "awaiting_attachment"
        bot.send_message(cid, "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏:")
    elif answer == "–Ω–µ—Ç":
        save_client_block(client_data[cid])
        bot.send_message(cid, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_data[cid][0]} –¥–æ–±–∞–≤–ª–µ–Ω.")
        reset_user_state(cid)
    else:
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

@bot.message_handler(content_types=['document', 'photo'])
def handle_attachments(message):
    cid = message.chat.id
    if user_states.get(cid) == "awaiting_attachment":
        client_id = client_data[cid][0]
        folder = f"attachments/{client_id}"
        os.makedirs(folder, exist_ok=True)
        file_id = message.document.file_id if message.document else message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        filename = file_info.file_path.split("/")[-1]
        filepath = os.path.join(folder, filename)
        with open(filepath, 'wb') as f:
            f.write(downloaded_file)
        save_client_block(client_data[cid])
        bot.send_message(cid, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º.")
        reset_user_state(cid)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) in ADD_CLIENT_STEPS)
def handle_add_steps(message):
    cid = message.chat.id
    state = user_states[cid]
    value = message.text.strip()

    if state == "phone":
        client_data[cid].append(value)
        user_states[cid] = "birth"
        bot.send_message(cid, "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif state == "birth":
        client_data[cid].append(value)
        user_states[cid] = "credentials"
        bot.send_message(cid, "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    elif state == "credentials":
        creds = value.split('\n')
        if len(creds) < 3:
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ 3 —Å—Ç—Ä–æ–∫–∏: email, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã.")
            return
        client_data[cid].extend(creds[:3])
        user_states[cid] = "has_subscription"
        bot.send_message(cid, "–®–∞–≥ 4: –ï—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞? (–î–∞ / –ù–µ—Ç)")
    elif state == "has_subscription":
        if value.lower() == "–¥–∞":
            user_states[cid] = "subscription_type"
            bot.send_message(cid, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: PS Plus Deluxe):")
        else:
            client_data[cid].append("–ù–µ—Ç—É")
            client_data[cid].append("01.01.2000")
            user_states[cid] = "ask_games"
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(KeyboardButton("–ò–≥—Ä—ã –Ω–µ –∫—É–ø–ª–µ–Ω—ã"), KeyboardButton("–ò–≥—Ä—ã –∫—É–ø–ª–µ–Ω—ã"))
            bot.send_message(cid, "–®–∞–≥ 6: –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã?", reply_markup=markup)
    elif state == "subscription_type":
        client_data[cid].append(value)
        user_states[cid] = "subscription_duration"
        bot.send_message(cid, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3):")
    elif state == "subscription_duration":
        client_data[cid].append(value)
        user_states[cid] = "subscription_region"
        bot.send_message(cid, "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: (—Ç—É—Ä) –∏–ª–∏ (—É–∫—Ä)):")
    elif state == "subscription_region":
        region = value if value.startswith("(") and value.endswith(")") else f"({value})"
        name = client_data[cid][-2]
        months = client_data[cid][-1]
        sub_string = f"{name} {months}–º {region}"
        client_data[cid] = client_data[cid][:-2]
        client_data[cid].append(sub_string)
        user_states[cid] = "start_date"
        bot.send_message(cid, "–®–∞–≥ 5: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif state == "start_date":
        client_data[cid].append(value)
        user_states[cid] = "ask_games"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("–ò–≥—Ä—ã –Ω–µ –∫—É–ø–ª–µ–Ω—ã"), KeyboardButton("–ò–≥—Ä—ã –∫—É–ø–ª–µ–Ω—ã"))
        bot.send_message(cid, "–®–∞–≥ 6: –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã?", reply_markup=markup)
    elif state == "games":
        client_data[cid].append("---")
        client_data[cid].extend(value.split('\n'))
        user_states[cid] = "ask_attachment"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
        bot.send_message(cid, "–ï—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã?", reply_markup=markup)

def notify_loop():
    while True:
        now = datetime.datetime.now()
        if now.hour == 9:
            items = get_upcoming_notifications()
            for notif in items:
                phone, typ, months, end_date, birthday = notif
                if end_date:
                    msg = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–£ –∫–ª–∏–µ–Ω—Ç–∞ {phone} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ {typ} ({months}–º) –∑–∞–≤—Ç—Ä–∞ ({end_date})"
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"open_client_{phone}"))
                    bot.send_message(ALLOWED_USER_ID, msg, reply_markup=markup)
                if birthday:
                    msg = f"–£ –∫–ª–∏–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
                    bot.send_message(ALLOWED_USER_ID, msg)
                    data = get_client_block(phone)
                    if data:
                        bot.send_message(ALLOWED_USER_ID, data)
        time.sleep(3600)

init_db()
threading.Thread(target=notify_loop, daemon=True).start()
bot.infinity_polling()