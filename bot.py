import os
import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from database import *
import datetime
import threading
import time
import io
import sqlite3

API_TOKEN = "7832902735:AAGJzhg00l7x2R8jr-eonf5KZF9c8QYQaCY"
ALLOWED_USER_ID = 350902460

bot = telebot.TeleBot(API_TOKEN)
user_states = {}
client_data = {}

def is_authorized(message):
    return message.from_user.id == ALLOWED_USER_ID

def reset_user_state(user_id):
    user_states.pop(user_id, None)
    client_data.pop(user_id, None)

def show_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    markup.add("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    markup.add("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", "üß® –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É")
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        return bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    show_menu(message)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_menu")
def handle_edit_choice(message):
    phone = client_data.get(message.chat.id)
    if not phone:
        return
    choice = message.text
    if choice == "üì± –¢–µ–ª–µ—Ñ–æ–Ω":
        user_states[message.chat.id] = "edit_phone"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif choice == "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
        user_states[message.chat.id] = "edit_birth"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif choice == "üîê –ê–∫–∫–∞—É–Ω—Ç":
        user_states[message.chat.id] = "edit_account"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã (—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    elif choice == "üïπ –ü–æ–¥–ø–∏—Å–∫–∞":
        user_states[message.chat.id] = "edit_subscription_type"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("PS Plus Deluxe", "PS Plus Extra", "PS Plus Essential", "EA Play")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    elif choice == "üéÆ –ò–≥—Ä—ã":
        user_states[message.chat.id] = "edit_games"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    elif choice == "üìé –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã":
        user_states[message.chat.id] = "edit_attachment"
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ:")
    elif choice == "‚ùå –û—Ç–º–µ–Ω–∞":
        reset_user_state(message.chat.id)
        show_menu(message)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_subscription_type")
def edit_sub_duration(message):
    client_data[message.chat.id] = [message.text.strip()]
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("1–º", "3–º", "12–º")
    user_states[message.chat.id] = "edit_subscription_duration"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_subscription_duration")
def edit_sub_region(message):
    client_data[message.chat.id].append(message.text.strip())
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("(—Ç—É—Ä)", "(—É–∫—Ä)", "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω")
    user_states[message.chat.id] = "edit_subscription_region"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_subscription_region")
def edit_sub_region_value(message):
    region = message.text.strip()
    if region.lower() == "–¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω":
        user_states[message.chat.id] = "edit_subscription_custom_region"
        return bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: (–≥–µ—Ä)):")
    finish_subscription_edit(message, region)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_subscription_custom_region")
def edit_sub_custom_region(message):
    region = message.text.strip()
    if not (region.startswith("(") and region.endswith(")")):
        region = f"({region})"
    finish_subscription_edit(message, region)

def finish_subscription_edit(message, region):
    chat_id = message.chat.id
    phone = client_data.get(chat_id)
    type_, duration = client_data[chat_id][:2]
    user_states[chat_id] = "edit_subscription_date"
    client_data[chat_id] = [type_, duration, region]
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_subscription_date")
def update_subscription(message):
    phone = client_data[message.chat.id]
    type_, duration, region = client_data[message.chat.id][:3]
    start_date = message.text.strip()
    months = int(duration.replace("–º", ""))
    start = datetime.datetime.strptime(start_date, "%d.%m.%Y")
    end = start + datetime.timedelta(days=30 * months)
    full_type = f"{type_} {duration} {region}"
    with sqlite3.connect("clients.db") as conn:
        c = conn.cursor()
        c.execute("DELETE FROM subscriptions WHERE phone = ?", (phone,))
        c.execute("INSERT INTO subscriptions VALUES (?, ?, ?, ?, ?)", (phone, full_type, months, start_date, end.strftime("%d.%m.%Y")))
        conn.commit()
    bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    show_menu(message)

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "edit_games")
def update_games(message):
    phone = client_data.get(message.chat.id)
    games = message.text.strip().split("\n")
    with sqlite3.connect("clients.db") as conn:
        c = conn.cursor()
        c.execute("DELETE FROM games WHERE phone = ?", (phone,))
        for g in games:
            c.execute("INSERT INTO games VALUES (?, ?)", (phone, g))
        conn.commit()
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∏–≥—Ä –æ–±–Ω–æ–≤–ª—ë–Ω.")
    show_menu(message)

@bot.message_handler(content_types=["photo", "document"])
def update_attachment_edit(message):
    if user_states.get(message.chat.id) != "edit_attachment":
        return
    phone = client_data.get(message.chat.id)
    if not phone:
        return
    folder = f"attachments/{phone}"
    os.makedirs(folder, exist_ok=True)
    file = message.photo[-1] if message.photo else message.document
    file_info = bot.get_file(file.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    filename = file_info.file_path.split("/")[-1]
    with open(os.path.join(folder, filename), "wb") as f:
        f.write(downloaded_file)
    bot.send_message(message.chat.id, "–í–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    reset_user_state(message.chat.id)
    show_menu(message)

init_db()
threading.Thread(target=notify_loop, daemon=True).start()
bot.infinity_polling()
