import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import *
import datetime
import threading
import time
import os
import sqlite3

API_TOKEN = "7832902735:AAGJzhg00l7x2R8jr-eonf5KZF9c8QYQaCY"
ALLOWED_USER_ID = 350902460

bot = telebot.TeleBot(API_TOKEN)
user_states = {}
client_data = {}

ADD_CLIENT_STEPS = [
    "phone", "birth", "credentials", "subscription", "start_date", "games"
]

def is_authorized(message):
    return message.from_user.id == ALLOWED_USER_ID

def reset_user_state(user_id):
    user_states.pop(user_id, None)
    client_data.pop(user_id, None)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        return bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    show_menu(message)

@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    markup.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"))
    markup.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"), KeyboardButton("üìä –ö–æ–ª-–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"))
    markup.add(KeyboardButton("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É"))
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥", reply_markup=markup)

@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def start_add_client(message):
    user_states[message.chat.id] = "phone"
    client_data[message.chat.id] = []
    bot.send_message(message.chat.id, "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) in ADD_CLIENT_STEPS)
def handle_add_steps(message):
    state = user_states[message.chat.id]
    value = message.text.strip()

    if state == "phone":
        client_data[message.chat.id].append(value)
        user_states[message.chat.id] = "birth"
        bot.send_message(message.chat.id, "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif state == "birth":
        client_data[message.chat.id].append(value)
        user_states[message.chat.id] = "credentials"
        bot.send_message(message.chat.id, "–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):")
    elif state == "credentials":
        creds = value.split('\n')
        if len(creds) < 3:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 3 —Å—Ç—Ä–æ–∫–∏: email, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã.")
            return
        client_data[message.chat.id].extend(creds[:3])
        user_states[message.chat.id] = "subscription"
        bot.send_message(message.chat.id, "–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–æ–∫ –∏ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: PS Plus Extra 3–º (—Ç—É—Ä)):")
    elif state == "subscription":
        client_data[message.chat.id].append(value)
        user_states[message.chat.id] = "start_date"
        bot.send_message(message.chat.id, "–®–∞–≥ 5/6: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif state == "start_date":
        client_data[message.chat.id].append(value)
        user_states[message.chat.id] = "games"
        bot.send_message(message.chat.id, "–®–∞–≥ 6/6: –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä—ã (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äî‚Äî‚Äî):")
    elif state == "games":
        games = value.split('\n')
        client_data[message.chat.id].append("---")
        client_data[message.chat.id].extend(games)
        save_client_block(client_data[message.chat.id])
        bot.send_message(message.chat.id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_data[message.chat.id][0]} –¥–æ–±–∞–≤–ª–µ–Ω.")
        reset_user_state(message.chat.id)

@bot.message_handler(func=lambda m: is_authorized(m) and m.text == "üóë –£–¥–∞–ª–∏—Ç—å")
def prompt_delete_client(message):
    user_states[message.chat.id] = "delete_request"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "delete_request")
def confirm_delete_client(message):
    phone = message.text.strip()
    client = get_client_block(phone)
    if not client:
        bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        reset_user_state(message.chat.id)
        return

    client_data[message.chat.id] = phone
    user_states[message.chat.id] = "confirm_delete"
    bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:\n{client}\n\n–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞? (–î–∞ / –ù–µ—Ç)")

@bot.message_handler(func=lambda m: is_authorized(m) and user_states.get(m.chat.id) == "confirm_delete")
def handle_delete_confirmation(message):
    answer = message.text.strip().lower()
    phone = client_data.get(message.chat.id)
    if answer == "–¥–∞":
        with sqlite3.connect("clients.db") as conn:
            c = conn.cursor()
            c.execute("DELETE FROM clients WHERE phone = ?", (phone,))
            c.execute("DELETE FROM subscriptions WHERE phone = ?", (phone,))
            c.execute("DELETE FROM games WHERE phone = ?", (phone,))
            conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    reset_user_state(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("open_client_"))
def handle_open_client(call):
    phone = call.data.replace("open_client_", "")
    client = get_client_block(phone)
    if client:
        bot.send_message(call.message.chat.id, client)
    else:
        bot.send_message(call.message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def notify_loop():
    while True:
        now = datetime.datetime.now()
        if now.hour == 9:
            items = get_upcoming_notifications()
            for notif in items:
                phone, typ, months, end_date, birthday = notif
                if end_date:
                    msg = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–£ –∫–ª–∏–µ–Ω—Ç–∞ {phone} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ {typ} ({months}–º) –∑–∞–≤—Ç—Ä–∞ ({end_date})"
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"open_client_{phone}"))
                    bot.send_message(ALLOWED_USER_ID, msg, reply_markup=markup)
                if birthday:
                    msg = f"–£ –∫–ª–∏–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
                    bot.send_message(ALLOWED_USER_ID, msg)
                    data = get_client_block(phone)
                    if data:
                        bot.send_message(ALLOWED_USER_ID, data)
        time.sleep(3600)

init_db()
threading.Thread(target=notify_loop, daemon=True).start()
bot.infinity_polling()